-- Copyright (C) 2018  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details.

-- PROGRAM		"Quartus Prime"
-- VERSION		"Version 18.1.0 Build 625 09/12/2018 SJ Lite Edition"
-- CREATED		"Sat May 20 16:09:20 2023"

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.all;
USE  IEEE.STD_LOGIC_ARITH.all;
USE  IEEE.STD_LOGIC_SIGNED.all;

LIBRARY work;

ENTITY main IS 
	PORT
	(
		clk :  IN  STD_LOGIC;
		pb2 :  IN  STD_LOGIC;
		PUSH_BUTTON_1 : IN STD_LOGIC;
		SWITCH_1 : IN STD_LOGIC;
		PS2_DAT :  INOUT  STD_LOGIC;
		PS2_CLK :  INOUT  STD_LOGIC;
		red_out :  OUT  STD_LOGIC;
		green_out :  OUT  STD_LOGIC;
		blue_out :  OUT  STD_LOGIC;
		horiz_sync_out :  OUT  STD_LOGIC;
		vert_sync_out :  OUT  STD_LOGIC;
		collision_signal : OUT STD_LOGIC;
		tens: OUT STD_LOGIC_VECTOR(6 DOWNTO 0);
		ones : OUT STD_LOGIC_VECTOR(6 DOWNTO 0)
	);
END main;

ARCHITECTURE bdf_type OF main IS 

COMPONENT vga_sync
	PORT(clock_25Mhz : IN STD_LOGIC;
		 red : IN STD_LOGIC;
		 green : IN STD_LOGIC;
		 blue : IN STD_LOGIC;
		 red_out : OUT STD_LOGIC;
		 green_out : OUT STD_LOGIC;
		 blue_out : OUT STD_LOGIC;
		 horiz_sync_out : OUT STD_LOGIC;
		 vert_sync_out : OUT STD_LOGIC;
		 pixel_column : OUT STD_LOGIC_VECTOR(9 DOWNTO 0);
		 pixel_row : OUT STD_LOGIC_VECTOR(9 DOWNTO 0)
	);
END COMPONENT;

COMPONENT char_rom_modified
	PORT(clock : IN STD_LOGIC;
		 character_address : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
		 font_col : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
		 font_row : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
		 rom_mux_output : OUT STD_LOGIC_VECTOR(2 DOWNTO 0)
	);
END COMPONENT;

COMPONENT mouse
	PORT(clock_25Mhz : IN STD_LOGIC;
		 reset : IN STD_LOGIC;
		 mouse_data : INOUT STD_LOGIC;
		 mouse_clk : INOUT STD_LOGIC;
		 left_button : OUT STD_LOGIC;
		 right_button : OUT STD_LOGIC;
		 mouse_cursor_column : OUT STD_LOGIC_VECTOR(9 DOWNTO 0);
		 mouse_cursor_row : OUT STD_LOGIC_VECTOR(9 DOWNTO 0)
	);
END COMPONENT;

COMPONENT pipes
	PORT(
		vert_sync						: IN std_logic;
		PIPE_STATE			    			: IN std_logic;
      	pixel_row, pixel_column			: IN std_logic_vector(9 DOWNTO 0);
		pipe_signal						: OUT std_logic;
		pipe1_x_pos_out 				: OUT std_logic_vector(10 DOWNTO 0);
		pipe2_x_pos_out 				: OUT std_logic_vector(10 DOWNTO 0);
		);
END COMPONENT;

COMPONENT collisions is
    PORT(
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        ball_signal : IN STD_LOGIC;
        pipe_signal : IN STD_LOGIC;
        collision_signal : OUT STD_LOGIC
    );
END COMPONENT;

COMPONENT score_tracker is
    port (
        clk : in std_logic;
        reset : in std_logic;
        enable : in std_logic;
        ball_x_pos : in std_logic_vector(10 downto 0);
        pipe1_x_pos : in std_logic_vector(10 downto 0);
        pipe2_x_pos : in std_logic_vector(10 downto 0);
        ones_score_out : out std_logic_vector(3 downto 0);
        tens_score_out : out std_logic_vector(3 downto 0)
    );
end COMPONENT;

COMPONENT display_mux_4to1
	port(
     clk				: IN std_logic;
	 ball_signal 		: IN std_logic;
	 ground_signal 		: IN std_logic;
	 background_signal 	: IN std_logic;
	 pipe_signal 		: IN std_logic;     
     Red, Green, Blue 	: OUT std_logic
  	);
END COMPONENT;

COMPONENT bouncy_ball
	PORT( 
		pb1				: IN std_logic;
		clk				: IN std_logic;
		vert_sync		: IN std_logic;
		BALL_STATE		: IN STD_LOGIC;
        ground_height	: IN std_logic_vector(9 DOWNTO 0);
		pixel_row 		: IN std_logic_vector(9 DOWNTO 0);	
		pixel_column	: IN std_logic_vector(9 DOWNTO 0);
		ball_signal 	: OUT std_logic
		);
END COMPONENT;

COMPONENT BCD_to_SevenSeg is
     port (BCD_digit : in std_logic_vector(3 downto 0);
           SevenSeg_out : out std_logic_vector(6 downto 0));
end COMPONENT;

COMPONENT background
	PORT(BG_STATE			: IN STD_LOGIC;		 
		background_signal : OUT std_logic
	);
END COMPONENT;

COMPONENT pll
	PORT(refclk : IN STD_LOGIC;
		 rst : IN STD_LOGIC;
		 outclk_0 : OUT STD_LOGIC;
		 locked : OUT STD_LOGIC
	);
END COMPONENT;

COMPONENT ground
	PORT( 
		pixel_row		: IN std_logic_vector(9 DOWNTO 0);
		pixel_column	: IN std_logic_vector(9 DOWNTO 0);
		ground_signal 	: OUT std_logic;
        ground_height	: OUT std_logic_vector(9 DOWNTO 0)
		);		
END COMPONENT;

COMPONENT state_machine
    PORT
        ( clk, vert_sync   : IN std_logic;
			 deadCheck, SWITCH_GAME, PUSH_BUTTON       : IN std_logic;
          BALL_STATE, BG_STATE, PIPE_STATE, OVER_STATE : OUT STD_LOGIC);
END COMPONENT;

SIGNAL	clk_out :  STD_LOGIC;
SIGNAL	ground_height :  STD_LOGIC_VECTOR(9 DOWNTO 0);
SIGNAL	pixel_column :  STD_LOGIC_VECTOR(9 DOWNTO 0);
SIGNAL	pixel_row :  STD_LOGIC_VECTOR(9 DOWNTO 0);
SIGNAL 	ball_signal 		: std_logic;
SIGNAL 	ground_signal 		: std_logic;
SIGNAL 	background_signal 	: std_logic;
SIGNAL 	pipe_signal 		: std_logic; 
SIGNAL 	pipe1_x_pos_out 	: std_logic_vector(10 DOWNTO 0);
SIGNAL	pipe2_x_pos_out 	: std_logic_vector(10 DOWNTO 0);
SIGNAL 	ones_score_out 		: std_logic_vector(3 downto 0);
SIGNAL  tens_score_out 		: std_logic_vector(3 downto 0);
SIGNAL 	text_rgb : std_logic_vector(2 downto 0);
SIGNAL	vert_sync :  STD_LOGIC;
SIGNAL	red_value :  STD_LOGIC;
SIGNAL	green_value :  STD_LOGIC;
SIGNAL	blue_value :  STD_LOGIC;
SIGNAL	gnd :  STD_LOGIC;
SIGNAL 	PIPE_STATE : STD_LOGIC;
SIGNAL	BALL_STATE : STD_LOGIC;
SIGNAL   BG_STATE : STD_LOGIC;
SIGNAL	OVER_STATE : STD_LOGIC;
SIGNAL	mouse_left_button :  STD_LOGIC;
SIGNAL	deadCheck : STD_LOGIC;


BEGIN 
gnd <= '0';
deadCheck <= '0';

VGA: vga_sync
PORT MAP(clock_25Mhz => clk_out,
		 red => red_value,
		 green => green_value,
		 blue => blue_value,
		 red_out => red_out,
		 green_out => green_out,
		 blue_out => blue_out,
		 horiz_sync_out => horiz_sync_out,
		 vert_sync_out => vert_sync,
		 pixel_column => pixel_column,
		 pixel_row => pixel_row);


CHARROM: char_rom_modified
PORT MAP(clock => clk_out,
		 character_address => pixel_row(9 DOWNTO 4),
		 font_col => pixel_column(3 DOWNTO 1),
		 font_row => pixel_row(3 DOWNTO 1),
		 rom_mux_output => text_rgb);

STATEMACHINE : state_machine
PORT MAP(clk => clk_out,
			vert_sync => vert_sync,
			deadCheck => deadCheck,
			SWITCH_GAME => SWITCH_1,
			PUSH_BUTTON => PUSH_BUTTON_1,
			BALL_STATE => BALL_STATE,
			BG_STATE => BG_STATE,
			PIPE_STATE => PIPE_STATE,
			OVER_STATE => OVER_STATE);

PIPE1: pipes
PORT MAP(vert_sync => vert_sync,
			PIPE_STATE => PIPE_STATE,
			pixel_row => pixel_row,
			pixel_column => pixel_column,
			pipe_signal => pipe_signal
			pipe1_x_pos_out => pipe1_x_pos_out
			pipe2_x_pos_out => pipe2_x_pos_out);

COL: collisions
    PORT MAP(
        clk => clk_out,
        reset => gnd,
        ball_signal => ball_signal,
        pipe_signal => pipe_signal,
        collision_signal => collision_signal
    );

SCORE_TRK: score_tracker
PORT MAP(clk => clk_out,
		reset => gnd,
		enable => PIPE_STATE,
		ball_x_pos => CONV_STD_LOGIC_VECTOR(320,11),
        pipe1_x_pos => pipe1_x_pos_out,
        pipe2_x_pos => pipe2_x_pos_out,
        ones_score_out => ones_score_out,
		tens_score_out => tens_score_out
);

BCD1: BCD_to_SevenSeg
PORT MAP(
	BCD_digit => ones_score_out,
	seven_seg => ones
)

BCD2: BCD_to_SevenSeg
PORT MAP(
	BCD_digit => tens_score_out,
	seven_seg => tens
)


MSE: mouse
PORT MAP(clock_25Mhz => clk_out,
		 reset => gnd,
		 mouse_data => PS2_DAT,
		 mouse_clk => PS2_CLK,
		 left_button => mouse_left_button);


DISPLAYMUX: display_mux_4to1
PORT MAP(clk => clk_out,
		 ball_signal => ball_signal,
		 ground_signal => ground_signal,
		 background_signal => background_signal,
		 pipe_signal => pipe_signal,
		 Red => red_value,
		 Green => green_value,
		 Blue => blue_value);


BALL: bouncy_ball
PORT MAP(pb1 => mouse_left_button,
		 clk => clk_out,
		 vert_sync => vert_sync,
		 BALL_STATE => BALL_STATE,
		 ground_height => ground_height,
		 pixel_column => pixel_column,
		 pixel_row => pixel_row,
		 ball_signal => ball_signal);

BG: background
PORT MAP(BG_STATE => BG_STATE,
			background_signal => background_signal);

CLKDIVIDER: pll
PORT MAP(refclk => clk,
		 rst => gnd,
		 outclk_0 => clk_out);

GAMEGND: ground
PORT MAP(pixel_column => pixel_column,
		 pixel_row => pixel_row,
		 ground_height => ground_height,
		 ground_signal => ground_signal);

vert_sync_out <= vert_sync;

END bdf_type;